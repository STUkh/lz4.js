#!/usr/bin/env node
const fs = require('fs');
const { lz4js: lz4 } = require('../index.js')();

const argv = require('yargs')
.usage('Usage: lz4-asm input [options]')
.example('lz4-asm input -l 9 > output')
.example('cat foo.txt | lz4-asm | lz4-asm -d')

.alias('l', 'compression-level')
.describe('l', 'compression level [0-16]')
.default('l', 0)

.alias('d', 'decompress')
.describe('d', 'decompress file')
.boolean('d')

.alias('o', 'output')
.describe('o', 'output file')

.option('block-max-size', {
  describe: 'block maximum size(uncompressed size)',
  choices: ['64KB', '256KB', '1MB', '4MB'],
  default: '4MB'
})

.option('block-mode', {
  describe: 'block independence flag: 0: blockLinked, 1: blockIndependent',
  default: 0
})

.option('dict-id', {
  describe: 'Dictionary ID, sent by compressor to help decoder select correct dictionary; 0 == no dictID provided',
  default: 0
})

.option('content-checksum', {
  describe: '0: disabled (default); 1: frame terminated with 32-bit checksum of decompressed data',
  default: 0
})

.option('block-checksum-flag', {
  describe: '0: default (fast mode); values > LZ4HC_CLEVEL_MAX count as LZ4HC_CLEVEL_MAX; values < 0 trigger "fast acceleration"',
  default: 0
})

.option('auto-flush', {
  describe: '1: always flush; reduces usage of internal buffers',
  default: 0
})

.option('favor-dec-speed', {
  describe: '1: parser favors decompression speed vs compression ratio. Only works for high compression modes (>= LZ4HC_CLEVEL_OPT_MIN)',
  default: 1
})

.alias('h', 'help')
.help('h')

.epilog('If you want to show more info, refer to https://github.com/Cyan4973/lz4/blob/master/lz4_Frame_format.md')
.argv

let inputStream;
if (argv._.length) {
  inputStream = fs.createReadStream(argv._[0]);
} else {
  process.stdin.resume();
  inputStream = process.stdin;
}
const outputStream = argv.o ? fs.createWriteStream(argv.o) : process.stdout;

const lz4Stream = argv.d ? lz4.createDecompressStream() : lz4.createCompressStream({
  blockSizeID: lz4.BLOCK_MAX_SIZE[argv.blockMaxSize], /* max64KB, max256KB, max1MB, max4MB; 0 == default */
  blockMode: argv.blockMode, /* LZ4F_blockLinked, LZ4F_blockIndependent; 0 == default */
  contentChecksumFlag: argv.contentChecksum, /* 1: frame terminated with 32-bit checksum of decompressed data; 0: disabled (default) */
  frameType: argv.frameType, /* read-only field : LZ4F_frame or LZ4F_skippableFrame */
  dictID: argv.dictId, /* Dictionary ID, sent by compressor to help decoder select correct dictionary; 0 == no dictID provided */
  blockChecksumFlag: argv.blockChecksumFlag, /* 1: each block followed by a checksum of block's compressed data; 0: disabled (default) */
  compressionLevel: argv.l, /* 0: default (fast mode); values > LZ4HC_CLEVEL_MAX count as LZ4HC_CLEVEL_MAX; values < 0 trigger "fast acceleration" */
  autoFlush: argv.autoFlush, /* 1: always flush; reduces usage of internal buffers */
  favorDecSpeed: argv.favorDecSpeed, /* 1: parser favors decompression speed vs compression ratio. Only works for high compression modes (>= LZ4HC_CLEVEL_OPT_MIN) */  /* v1.8.2+ */
});

inputStream.pipe(lz4Stream).pipe(outputStream);